"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeCore = void 0;
const result_1 = require("./result.cjs");
const validate_flag_name_1 = __importDefault(require("../helpers/validate-flag-name.cjs"));
class TypeCore {
    constructor(config) {
        this.config = config;
        this.name = 'core';
    }
    parse(value) {
        const result = this.checkType(value);
        if (result instanceof result_1.ResultErr) {
            return { value: null, error: result.message, valid: false };
        }
        return { value: result.value, error: null, valid: true };
    }
    checkType(_) {
        return new result_1.ResultErr("This type doesn't have a checkType method");
    }
    default(value) {
        this.config.required = true;
        this.config.default = value;
        return this;
    }
    ask(askQuestion) {
        this.config.required = true;
        this.config.askQuestion = askQuestion ?? 'Enter a value:';
        return this;
    }
    aliases(...aliases) {
        aliases.forEach((alias) => {
            (0, validate_flag_name_1.default)(alias);
        });
        this.config.aliases = [...new Set(aliases)].sort((a, b) => a.length - b.length);
        return this;
    }
    required() {
        this.config.required = true;
        return this;
    }
    description(description) {
        this.config.description = description;
        return this;
    }
}
exports.TypeCore = TypeCore;
