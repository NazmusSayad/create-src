"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeArray = void 0;
const TypeCore_1 = require("./TypeCore.cjs");
const result_1 = require("./result.cjs");
class TypeArray extends TypeCore_1.TypeCore {
    constructor() {
        super(...arguments);
        this.name = 'array';
    }
    checkType(value) {
        if (!Array.isArray(value)) {
            return new result_1.ResultErr('Expected an array of ' + this.config.schema.name);
        }
        if (this.config.minLength && value.length < this.config.minLength) {
            return new result_1.ResultErr(`Minimum ${this.config.minLength} items expected`);
        }
        if (this.config.maxLength && value.length > this.config.maxLength) {
            return new result_1.ResultErr(`Maximum ${this.config.maxLength} items expected`);
        }
        const result = value.map((item) => {
            const schema = this.config.schema;
            return schema['checkType'](item);
        });
        for (let item of result) {
            if (item instanceof result_1.ResultErr)
                return item;
        }
        return new result_1.ResultOk(result.map((item) => item.value));
    }
    minLength(minLength) {
        this.config.minLength = minLength;
        return this;
    }
    maxLength(maxLength) {
        this.config.maxLength = maxLength;
        return this;
    }
}
exports.TypeArray = TypeArray;
