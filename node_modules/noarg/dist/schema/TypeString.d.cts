import { TypeCore } from "./TypeCore.cjs";
import { Prettify } from "../types/util.t.cjs";
import { ResultErr, ResultOk } from "./result.cjs";
export declare class TypeString<const TConfig extends TypeString.Config> extends TypeCore<TConfig> {
    name: "string";
    protected checkType(value: string): ResultOk | ResultErr;
    regex<TRegex extends RegExp>(regex: TRegex): TypeString<Prettify<TConfig & {
        regex: TRegex;
    }>>;
    minLength<TMinLength extends number>(minLength: TMinLength): TypeString<Prettify<TConfig & {
        minLength: TMinLength;
    }>>;
    maxLength<TMaxLength extends number>(maxLength: TMaxLength): TypeString<Prettify<TConfig & {
        maxLength: TMaxLength;
    }>>;
    toCase<TToCase extends 'lower' | 'upper'>(toCase: TToCase): TypeString<Prettify<TConfig & {
        toCase: TToCase;
    }>>;
}
export declare namespace TypeString {
    type Config = TypeCore.Config & Partial<{
        regex: RegExp;
        minLength: number;
        maxLength: number;
        toCase: 'lower' | 'upper';
        enum: Set<string>;
    }>;
    type Sample = TypeString<Config>;
}
