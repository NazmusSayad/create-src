"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeString = void 0;
const TypeCore_1 = require("./TypeCore.cjs");
const result_1 = require("./result.cjs");
class TypeString extends TypeCore_1.TypeCore {
    constructor() {
        super(...arguments);
        this.name = 'string';
    }
    checkType(value) {
        if (this.config.regex && !this.config.regex.test(value)) {
            return new result_1.ResultErr(`\`${value}\` doesn't match pattern ${this.config.regex}`);
        }
        if (this.config.minLength && value.length < this.config.minLength) {
            return new result_1.ResultErr(`Minimum ${this.config.minLength} characters expected`);
        }
        if (this.config.maxLength && value.length > this.config.maxLength) {
            return new result_1.ResultErr(`Maximum ${this.config.maxLength} characters expected`);
        }
        if (this.config.toCase === 'lower')
            value = value.toLowerCase();
        if (this.config.toCase === 'upper')
            value = value.toUpperCase();
        if (this.config.enum &&
            this.config.enum.size &&
            !this.config.enum.has(value)) {
            return new result_1.ResultErr(`\`${value}\` is not in enum`);
        }
        return new result_1.ResultOk(value);
    }
    regex(regex) {
        this.config.regex = regex;
        return this;
    }
    minLength(minLength) {
        this.config.minLength = minLength;
        return this;
    }
    maxLength(maxLength) {
        this.config.maxLength = maxLength;
        return this;
    }
    toCase(toCase) {
        this.config.toCase = toCase;
        return this;
    }
}
exports.TypeString = TypeString;
