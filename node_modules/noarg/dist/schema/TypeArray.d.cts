import { TypeCore } from "./TypeCore.cjs";
import { Prettify } from "../types/util.t.cjs";
import { TSchemaPrimitive } from "./type.t.cjs";
import { ResultErr, ResultOk } from "./result.cjs";
export declare class TypeArray<const TConfig extends TypeArray.Config> extends TypeCore<TConfig> {
    name: "array";
    protected checkType(value: string[]): ResultOk | ResultErr;
    minLength<TMinLength extends number>(minLength: TMinLength): TypeArray<Prettify<TConfig & {
        minLength: TMinLength;
    }>>;
    maxLength<TMaxLength extends number>(maxLength: TMaxLength): TypeArray<Prettify<TConfig & {
        maxLength: TMaxLength;
    }>>;
}
export declare namespace TypeArray {
    type Config = TypeCore.Config & Partial<{
        minLength: number;
        maxLength: number;
    }> & {
        schema: TSchemaPrimitive;
    };
    type Sample = TypeArray<Config>;
}
