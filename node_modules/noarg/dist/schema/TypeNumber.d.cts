import { TypeCore } from "./TypeCore.cjs";
import { Prettify } from "../types/util.t.cjs";
import { ResultErr, ResultOk } from "./result.cjs";
export declare class TypeNumber<const TConfig extends TypeNumber.Config> extends TypeCore<TConfig> {
    name: "number";
    protected checkType(value: string | number): ResultOk | ResultErr;
    min<TMin extends number>(min: TMin): TypeNumber<Prettify<TConfig & {
        min: TMin;
    }>>;
    max<TMax extends number>(max: TMax): TypeNumber<Prettify<TConfig & {
        max: TMax;
    }>>;
    toInteger(): TypeNumber<Prettify<TConfig & {
        toInteger: true;
    }>>;
}
export declare namespace TypeNumber {
    type Config = TypeCore.Config & Partial<{
        min: number;
        max: number;
        enum: Set<number>;
        toInteger: boolean;
    }>;
    type Sample = TypeNumber<Config>;
}
