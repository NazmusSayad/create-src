import { TypeCore } from "./TypeCore.mjs";
import { ResultErr, ResultOk } from "./result.mjs";
export class TypeNumber extends TypeCore {
    constructor() {
        super(...arguments);
        this.name = 'number';
    }
    checkType(value) {
        if (value === '')
            return new ResultErr(`Number can not be empty string`);
        const number = typeof value === 'string' ? Number(value) : value;
        if (isNaN(number))
            return new ResultErr(`\`${value}\` is not a valid number`);
        if (this.config.min && number < this.config.min) {
            return new ResultErr(`Number must be at least ${this.config.min}`);
        }
        if (this.config.max && number > this.config.max) {
            return new ResultErr(`Number must be at most ${this.config.max}`);
        }
        if (this.config.enum &&
            this.config.enum.size &&
            !this.config.enum.has(number)) {
            return new ResultErr(`\`${number}\` is not in enum`);
        }
        return new ResultOk(this.config.toInteger ? Math.floor(number) : number);
    }
    min(min) {
        this.config.min = min;
        return this;
    }
    max(max) {
        this.config.max = max;
        return this;
    }
    toInteger() {
        this.config.toInteger = true;
        return this;
    }
}
