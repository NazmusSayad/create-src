import { TypeCore } from "./TypeCore.mjs";
import { ResultErr, ResultOk } from "./result.mjs";
export class TypeArray extends TypeCore {
    constructor() {
        super(...arguments);
        this.name = 'array';
    }
    checkType(value) {
        if (!Array.isArray(value)) {
            return new ResultErr('Expected an array of ' + this.config.schema.name);
        }
        if (this.config.minLength && value.length < this.config.minLength) {
            return new ResultErr(`Minimum ${this.config.minLength} items expected`);
        }
        if (this.config.maxLength && value.length > this.config.maxLength) {
            return new ResultErr(`Maximum ${this.config.maxLength} items expected`);
        }
        const result = value.map((item) => {
            const schema = this.config.schema;
            return schema['checkType'](item);
        });
        for (let item of result) {
            if (item instanceof ResultErr)
                return item;
        }
        return new ResultOk(result.map((item) => item.value));
    }
    minLength(minLength) {
        this.config.minLength = minLength;
        return this;
    }
    maxLength(maxLength) {
        this.config.maxLength = maxLength;
        return this;
    }
}
