import colors from "../lib/colors.mjs";
import * as inquirer from "@inquirer/prompts";
const typePrompter = {
    async string(schema, prefix = '') {
        if (schema.config.enum) {
            return this.select('string:', Array.from(schema.config.enum));
        }
        let result;
        await inquirer.input({
            theme: { prefix: '' },
            message: prefix + colors.reset.yellow('string:'),
            required: schema.config.required,
            default: schema.config.default,
            validate(input) {
                if (!schema.config.required && !input)
                    return true;
                const { value, error, valid } = schema.parse(input);
                result = value;
                if (valid)
                    return true;
                return error;
            },
            transformer: schema.config.toCase
                ? (value, { isFinal }) => {
                    const transformed = schema.config.toCase === 'upper'
                        ? value.toUpperCase()
                        : schema.config.toCase === 'lower'
                            ? value.toLowerCase()
                            : value;
                    return isFinal ? colors.reset.cyan(transformed) : transformed;
                }
                : undefined,
        });
        return result;
    },
    async number(schema, prefix = '') {
        if (schema.config.enum) {
            return this.select('number:', Array.from(schema.config.enum));
        }
        let result;
        await inquirer.number({
            theme: { prefix: '' },
            message: prefix + colors.reset.yellow('number:'),
            required: schema.config.required,
            default: schema.config.default,
            validate(input) {
                const { value, error, valid } = schema.parse(input);
                result = value;
                if (valid)
                    return true;
                return error;
            },
        });
        return Number(result);
    },
    async boolean(schema, prefix = '') {
        return inquirer.confirm({
            theme: { prefix: '' },
            default: schema.config.default,
            message: prefix + colors.reset.yellow('boolean:'),
        });
    },
    async array(schema) {
        const output = [];
        while (true) {
            const fn = typePrompter[schema.config.schema.name];
            const result = await fn(schema.config.schema, colors.reset.yellow(String(output.length + 1)) + '. ');
            if (result)
                output.push(result);
            else {
                const stopAddingItems = await inquirer.confirm({
                    message: colors.reset.red('Do you want to stop adding items?'),
                    theme: { prefix: '#' },
                });
                if (stopAddingItems)
                    break;
            }
            if (output.length >= (schema.config.maxLength ?? Infinity))
                break;
        }
        return output;
    },
    async tuple(schema) {
        const output = [];
        for (const childSchema of schema.config.schema) {
            const fn = typePrompter[childSchema.name];
            const result = await fn(childSchema, colors.reset.yellow(String(output.length + 1)) + '. ');
            output.push(result);
        }
        return output;
    },
    async select(type, choices) {
        const result = await inquirer.select({
            theme: { prefix: '' },
            message: colors.reset.yellow(type),
            choices: choices.map((choice) => ({
                name: String(choice),
                value: choice,
            })),
        });
        return result;
    },
};
export default function (schema, prefix) {
    if (schema.name in typePrompter) {
        console.log([prefix, colors.bold(schema.config.askQuestion ?? 'Enter a value:')]
            .filter(Boolean)
            .join(' '));
        return typePrompter[schema.name](schema);
    }
    throw new Error(`Unknown schema type: ${schema.name}`);
}
