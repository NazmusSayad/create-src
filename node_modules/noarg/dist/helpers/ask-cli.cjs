"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const colors_1 = __importDefault(require("../lib/colors.cjs"));
const inquirer = __importStar(require("@inquirer/prompts"));
const typePrompter = {
    async string(schema, prefix = '') {
        if (schema.config.enum) {
            return this.select('string:', Array.from(schema.config.enum));
        }
        let result;
        await inquirer.input({
            theme: { prefix: '' },
            message: prefix + colors_1.default.reset.yellow('string:'),
            required: schema.config.required,
            default: schema.config.default,
            validate(input) {
                if (!schema.config.required && !input)
                    return true;
                const { value, error, valid } = schema.parse(input);
                result = value;
                if (valid)
                    return true;
                return error;
            },
            transformer: schema.config.toCase
                ? (value, { isFinal }) => {
                    const transformed = schema.config.toCase === 'upper'
                        ? value.toUpperCase()
                        : schema.config.toCase === 'lower'
                            ? value.toLowerCase()
                            : value;
                    return isFinal ? colors_1.default.reset.cyan(transformed) : transformed;
                }
                : undefined,
        });
        return result;
    },
    async number(schema, prefix = '') {
        if (schema.config.enum) {
            return this.select('number:', Array.from(schema.config.enum));
        }
        let result;
        await inquirer.number({
            theme: { prefix: '' },
            message: prefix + colors_1.default.reset.yellow('number:'),
            required: schema.config.required,
            default: schema.config.default,
            validate(input) {
                const { value, error, valid } = schema.parse(input);
                result = value;
                if (valid)
                    return true;
                return error;
            },
        });
        return Number(result);
    },
    async boolean(schema, prefix = '') {
        return inquirer.confirm({
            theme: { prefix: '' },
            default: schema.config.default,
            message: prefix + colors_1.default.reset.yellow('boolean:'),
        });
    },
    async array(schema) {
        const output = [];
        while (true) {
            const fn = typePrompter[schema.config.schema.name];
            const result = await fn(schema.config.schema, colors_1.default.reset.yellow(String(output.length + 1)) + '. ');
            if (result)
                output.push(result);
            else {
                const stopAddingItems = await inquirer.confirm({
                    message: colors_1.default.reset.red('Do you want to stop adding items?'),
                    theme: { prefix: '#' },
                });
                if (stopAddingItems)
                    break;
            }
            if (output.length >= (schema.config.maxLength ?? Infinity))
                break;
        }
        return output;
    },
    async tuple(schema) {
        const output = [];
        for (const childSchema of schema.config.schema) {
            const fn = typePrompter[childSchema.name];
            const result = await fn(childSchema, colors_1.default.reset.yellow(String(output.length + 1)) + '. ');
            output.push(result);
        }
        return output;
    },
    async select(type, choices) {
        const result = await inquirer.select({
            theme: { prefix: '' },
            message: colors_1.default.reset.yellow(type),
            choices: choices.map((choice) => ({
                name: String(choice),
                value: choice,
            })),
        });
        return result;
    },
};
function default_1(schema, prefix) {
    if (schema.name in typePrompter) {
        console.log([prefix, colors_1.default.bold(schema.config.askQuestion ?? 'Enter a value:')]
            .filter(Boolean)
            .join(' '));
        return typePrompter[schema.name](schema);
    }
    throw new Error(`Unknown schema type: ${schema.name}`);
}
