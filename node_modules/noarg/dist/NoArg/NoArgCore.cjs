"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoArgCoreHelper = exports.NoArgCore = void 0;
const validate_flag_name_1 = __importDefault(require("../helpers/validate-flag-name.cjs"));
class NoArgCore {
    validateNonEmptyString(value, name) {
        if (typeof value !== 'string' || !value) {
            throw new Error(`\`${name}\` must be a non empty string`);
        }
    }
    constructor(name, system, config, options) {
        this.name = name;
        this.system = system;
        this.config = config;
        this.options = options;
        this.programs = new Map();
        if (typeof system.booleanNotSyntaxEnding === 'string') {
            this.validateNonEmptyString(system.booleanNotSyntaxEnding, 'system.booleanNotSyntaxEnding');
        }
        if (options.trailingArguments) {
            this.validateNonEmptyString(options.trailingArguments, 'options.trailingArguments');
        }
        if (options.flags) {
            Object.keys(options.flags).forEach((name) => {
                (0, validate_flag_name_1.default)(name, system.booleanNotSyntaxEnding || undefined);
            });
        }
        if (options.globalFlags) {
            Object.keys(options.globalFlags).forEach((name) => {
                (0, validate_flag_name_1.default)(name, system.booleanNotSyntaxEnding || undefined);
            });
        }
        this.system = Object.freeze({ ...system });
        this.config = Object.freeze({ ...config });
        this.options = Object.freeze({ ...options });
    }
}
exports.NoArgCore = NoArgCore;
var NoArgCoreHelper;
(function (NoArgCoreHelper) {
    NoArgCoreHelper.defaultConfig = {
        help: true,
    };
    NoArgCoreHelper.defaultOptions = {
        arguments: [],
        optionalArguments: [],
        flags: {},
        globalFlags: {},
    };
    NoArgCoreHelper.defaultSystem = {
        allowEqualAssign: true,
        allowDuplicateFlagForList: true,
        booleanNotSyntaxEnding: '!',
    };
    NoArgCoreHelper.defaultConfig;
    NoArgCoreHelper.defaultSystem;
    NoArgCoreHelper.defaultOptions;
})(NoArgCoreHelper || (exports.NoArgCoreHelper = NoArgCoreHelper = {}));
