import { NoArgCore, NoArgCoreHelper } from "./NoArgCore.cjs";
import { TSchema } from "../schema/type.t.cjs";
export declare class NoArgParser<TName extends string, TSystem extends NoArgCoreHelper.System, TConfig extends NoArgCoreHelper.Config, TOptions extends NoArgCoreHelper.Options> extends NoArgCore<TName, TSystem, TConfig, TOptions> {
    private browsePrograms;
    private divideArguments;
    private findFlagInSchema;
    private getFlagMetadata;
    private checkRecordFactory;
    private parseFlagsCore;
    private parseArguments;
    private parseFlags;
    private parseCore;
    protected parseStart(args: string[]): ReturnType<typeof this.parseCore> | void;
}
export declare namespace NoArgParserHelper {
    type ParsedFlagRecord = {
        arg: string;
    } & ({
        key: string;
        value: string | null;
        argType: 'flag' | 'alias';
        hasBooleanEndValue: true;
    } | {
        key: null;
        value: string;
        argType: 'value';
    });
    type ParsedFlagWithSchema = {
        arg: string;
        schema: TSchema;
        values: string[];
        argType: Exclude<NoArgParserHelper.ParsedFlagRecord['argType'], 'value'>;
    };
    const flagRegex: RegExp;
    const flagAliasRegex: RegExp;
    const optionWithValueRegex: RegExp;
}
