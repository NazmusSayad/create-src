"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoArgProgram = void 0;
const colors_1 = __importDefault(require("../lib/colors.cjs"));
const NoArgError_1 = require("./NoArgError.cjs");
const NoArgParser_1 = require("./NoArgParser.cjs");
const ThrowExit_1 = __importDefault(require("../helpers/ThrowExit.cjs"));
const utils_1 = require("../utils/index.cjs");
const NoArgCore_1 = require("./NoArgCore.cjs");
const TypeArray_1 = require("../schema/TypeArray.cjs");
const TypeTuple_1 = require("../schema/TypeTuple.cjs");
const TypeString_1 = require("../schema/TypeString.cjs");
const TypeNumber_1 = require("../schema/TypeNumber.cjs");
const custom_table_1 = require("../helpers/custom-table.cjs");
class NoArgProgram extends NoArgParser_1.NoArgParser {
    constructor(name, system, config, options, parent) {
        super(name, system, config, options);
        this.colors = {
            type: colors_1.default.yellow,
            description: colors_1.default.reset,
            programs: colors_1.default.magenta,
            arguments: colors_1.default.blue,
            flags: colors_1.default.cyan,
            trailingArgs: colors_1.default.green,
            emptyString: colors_1.default.dim('┈'),
        };
        this.renderUsageUtils = {
            printValid(...args) {
                console.log('  ', colors_1.default.green('✔   ' + args.join(' ')));
            },
            printInvalid(...args) {
                console.log('  ', colors_1.default.red('✖   ' + args.join(' ')));
            },
            printGroupHeader(...args) {
                console.log(' ⚙︎', colors_1.default.dim(args.join(' ')));
            },
            printPointHeader(...args) {
                console.log('   -', colors_1.default.dim(args.join(' ')));
            },
            tableGroup(name, result, ...args) {
                return [name, args.join('\n'), result];
            },
        };
        this.parent = parent;
    }
    create(name, { config, ...options }) {
        const newConfig = {
            ...this.config,
            ...config,
        };
        const newOptions = {
            ...NoArgCore_1.NoArgCoreHelper.defaultOptions,
            ...{
                ...options,
                globalFlags: newConfig.skipGlobalFlags
                    ? options.globalFlags ?? NoArgCore_1.NoArgCoreHelper.defaultOptions.globalFlags
                    : {
                        ...this.options.globalFlags,
                        ...options.globalFlags,
                    },
            },
        };
        const child = new NoArgProgram(name, this.system, newConfig, newOptions, this);
        this.programs.set(name, child);
        return child;
    }
    on(callback) {
        this.onActionCallback = callback;
        return this;
    }
    async startCore(args) {
        try {
            const result = await this.parseStart(args);
            if (!result)
                return;
            const output = [
                [
                    ...result.args,
                    ...result.optArgs,
                    ...(this.options.listArgument ? [result.listArgs] : []),
                    ...(this.options.trailingArguments ? [result.trailingArgs] : []),
                ],
                { ...result.flags },
                { ...this.config },
                { ...this.system },
            ];
            this.onActionCallback?.(...output);
        }
        catch (error) {
            const canExit = !this.system.doNotExitOnError;
            if (error instanceof ThrowExit_1.default) {
                if (error.message) {
                    console.error(colors_1.default.red('Error:'), `${error.message}`);
                }
                if (!canExit)
                    return;
                return process.exit(error.code);
            }
            if (error instanceof NoArgError_1.NoArgError) {
                console.error(colors_1.default.red('Error:'), `${error.message}`);
                if (!canExit)
                    return;
                return process.exit(1);
            }
            throw error;
        }
    }
    renderHelpIntro() {
        console.log(colors_1.default.cyan.bold(this.name), this.options.description
            ? this.colors.description(this.options.description)
            : '');
    }
    renderHelpUsageIntro() {
        console.log(colors_1.default.bold('Usage:'));
        if (this.options.customRenderHelp?.helpUsageStructure) {
            return console.log(colors_1.default.cyan('$'), this.options.customRenderHelp?.helpUsageStructure);
        }
        const commandItems = [colors_1.default.dim(this.name)];
        (function getParent(current) {
            if (!current.parent)
                return;
            commandItems.unshift(current.parent.name);
            getParent(current.parent);
        })(this);
        if (this.programs.size) {
            commandItems.push(this.colors.programs('[' + 'program' + ']'));
        }
        this.options.arguments.forEach((argument) => {
            commandItems.push(this.colors.arguments(`<${argument.name}>`));
        });
        this.options.optionalArguments.forEach((argument) => {
            commandItems.push(this.colors.arguments(`<${argument.name}>`) + '?');
        });
        if (this.options.listArgument) {
            commandItems.push(this.colors.arguments('...[' + this.options.listArgument.name + ']'));
        }
        if (Object.keys(this.options.flags).length ||
            Object.keys(this.options.globalFlags).length) {
            commandItems.push(this.colors.flags('--[flags]'));
        }
        if (this.options.trailingArguments) {
            commandItems.push(this.colors.description(this.options.trailingArguments), this.colors.description(this.options.customRenderHelp?.helpUsageTrailingArgsLabel ??
                `[...trailing-args]`));
        }
        console.log([colors_1.default.cyan('$'), ...commandItems].filter(Boolean).join(' '));
    }
    renderHelpPrograms() {
        console.log(colors_1.default.bold('Programs:'));
        const programData = Array.from(this.programs).map(([name, program]) => [
            this.colors.programs(name),
            this.colors.description(program.options.description ?? this.colors.emptyString),
        ]);
        (0, custom_table_1.CustomTable)({
            sizes: [{ flex: 5, maxWidth: 20 }, { flex: 13 }],
            border: this.system.enableHelpBoxBorder,
        }, ...programData);
    }
    renderHelpArguments() {
        console.log(colors_1.default.bold('Arguments:'));
        const tables = [];
        this.options.arguments.forEach((argument) => {
            const { name, type } = argument;
            tables.push([
                this.colors.arguments(name),
                this.colors.type(type.name),
                this.colors.description(argument.description ?? this.colors.emptyString),
            ]);
        });
        this.options.optionalArguments.forEach((argument) => {
            const { name, type } = argument;
            tables.push([
                this.colors.arguments(name),
                this.colors.type(type.name) + '?',
                this.colors.description(argument.description ?? this.colors.emptyString),
            ]);
        });
        if (this.options.listArgument) {
            const { name, type, minLength, maxLength, description } = this.options.listArgument;
            tables.push([
                this.colors.arguments(name),
                this.colors.type(type.name) +
                    `[${(0, utils_1.getArrayLengthStr)(minLength, maxLength)}]` +
                    (minLength && minLength > 0 ? '' : '?'),
                this.colors.description(description ?? this.colors.emptyString),
            ]);
        }
        (0, custom_table_1.CustomTable)({
            sizes: [
                { flex: 6, maxWidth: 20 },
                { flex: 5, maxWidth: 20 },
                { flex: 10 },
            ],
            border: this.system.enableHelpBoxBorder,
        }, ...tables);
    }
    renderHelpFlags(flags) {
        const optionData = Object.entries(flags)
            .sort(([keyA], [keyB]) => {
            if (keyA > keyB)
                return 1;
            if (keyA < keyB)
                return -1;
            return 0;
        })
            .sort(([, aSchema], [, bSchema]) => {
            const aIsMust = aSchema.config.required &&
                aSchema.config.default === undefined &&
                aSchema.config.askQuestion === undefined;
            const bIsMust = bSchema.config.required &&
                bSchema.config.default === undefined &&
                bSchema.config.askQuestion === undefined;
            return aIsMust === bIsMust ? 0 : aIsMust ? -1 : 1;
        })
            .map(([name, schema]) => {
            const aliasString = schema.config.aliases
                ? `-${schema.config.aliases
                    .map((alias) => this.colors.flags(alias))
                    .join('\n -')}`
                : '';
            const optionName = '--' +
                this.colors.flags(name) +
                (aliasString ? '\n ' + aliasString : '');
            const optionType = (schema instanceof TypeArray_1.TypeArray
                ? this.colors.type(schema.config.schema.name) +
                    `[${(0, utils_1.getArrayLengthStr)(schema.config.minLength, schema.config.maxLength)}]`
                : schema instanceof TypeTuple_1.TypeTuple
                    ? '[' +
                        schema.config.schema
                            .map((schema) => this.colors.type(schema.name))
                            .join(', ') +
                        ']'
                    : this.colors.type(schema.name)) +
                (schema.config.required &&
                    schema.config.default === undefined &&
                    schema.config.askQuestion === undefined
                    ? ''
                    : '?');
            const enumValues = (schema instanceof TypeString_1.TypeString || schema instanceof TypeNumber_1.TypeNumber) &&
                schema.config.enum?.size
                ? colors_1.default.blue('\nChoices: ') +
                    [...schema.config.enum.values()]
                        .map((item) => colors_1.default.green(String(item)))
                        .join(', ')
                : '';
            return [
                optionName,
                optionType,
                this.colors.description(((schema.config.description ?? '') + enumValues).trim() ||
                    this.colors.emptyString),
            ];
        });
        (0, custom_table_1.CustomTable)({
            sizes: [
                { flex: 6, maxWidth: 20 },
                { flex: 5, maxWidth: 20 },
                { flex: 10 },
            ],
            border: this.system.enableHelpBoxBorder,
        }, ...optionData);
    }
    renderHelp() {
        this.renderHelpIntro();
        console.log('');
        this.renderHelpUsageIntro();
        console.log('');
        if (this.programs.size) {
            this.renderHelpPrograms();
            console.log('');
        }
        if (this.options.arguments.length ||
            this.options.optionalArguments.length ||
            this.options.listArgument) {
            this.renderHelpArguments();
            console.log('');
        }
        const hasFlags = Object.keys(this.options.flags).length;
        const hasGlobalFlags = Object.keys(this.options.globalFlags).length;
        if (hasFlags || hasGlobalFlags) {
            console.log(colors_1.default.bold('Flags:'));
            hasFlags && this.renderHelpFlags(this.options.flags);
            hasGlobalFlags && this.renderHelpFlags(this.options.globalFlags);
            console.log('');
        }
        if (this.options.trailingArguments) {
            console.log(colors_1.default.bold('Trailing Arguments:'));
            console.log(` These arguments are ${colors_1.default.red('ignored')} by the program and are passed as is.`);
            console.log('');
        }
        if (this.options.notes?.length) {
            console.log(colors_1.default.bold('Notes:'));
            this.options.notes.forEach((note) => {
                console.log(' -', colors_1.default.dim(note));
            });
            console.log('');
        }
        if (this.config.help) {
            console.log(colors_1.default.bold('Tips:'));
            console.log(' Use', colors_1.default.yellow('--help-usage'), 'or', colors_1.default.yellow('-hu'), 'flag to see how to use the program');
        }
    }
    renderUsageStructure() {
        console.log(colors_1.default.green('$'), this.colors.programs('programs'), this.colors.arguments('fixed-arguments'), this.colors.arguments('optional-arguments'), this.colors.arguments('list-arguments'), this.colors.flags('flags'), this.colors.trailingArgs('trailing-args'));
        console.log('', "This is the structure of the command line. It's the order of the arguments and options that you want to pass to the command. The order is important and can't be changed.");
        console.log('');
        this.renderUsageUtils.printPointHeader(this.colors.programs('programs'));
        console.log('', "This is the command that you want to run. It's the first argument of the command line.");
        console.log('');
        this.renderUsageUtils.printPointHeader(this.colors.arguments('fixed-arguments'));
        console.log('', "These are the arguments that you want to pass to the command. Their position and length is fixed and can't be changed.");
        console.log('');
        this.renderUsageUtils.printPointHeader(this.colors.arguments('optional-arguments'));
        console.log('', 'These are the arguments that you want to pass to the command. They are optional and can be changed.');
        console.log('');
        this.renderUsageUtils.printPointHeader(this.colors.arguments('list-arguments'));
        console.log('', 'These are the arguments that you want to pass to the command. They are list of values and length can vary on configuration. They also can be optional.');
        console.log('');
        this.renderUsageUtils.printPointHeader(this.colors.flags('flags'));
        console.log('', 'These are the options that you want to pass to the command. They are optional and can be changed.');
        console.log('');
        this.renderUsageUtils.printPointHeader(this.colors.trailingArgs('trailing-args'));
        console.log('', 'These are the arguments that are passed to the command after the trailing-args separator. They are passed as is and are ignored by the program.');
    }
    renderUsageHowToUseOptions() {
        (0, custom_table_1.CustomTable)({
            sizes: [
                { flex: 1, minWidth: 8, maxWidth: 20 },
                { flex: 3, maxWidth: 40 },
                { flex: 2, maxWidth: 40 },
            ],
            border: this.system.enableHelpBoxBorder,
        }, this.renderUsageUtils.tableGroup('string', 'string', '--string string', '--string=string'), this.renderUsageUtils.tableGroup('number', '100', '--number 100', '--number=100'), this.renderUsageUtils.tableGroup('boolean\n(true)', 'true', '--boolean', '--boolean true', '--boolean=true', '--boolean yes', '--boolean=yes', colors_1.default.dim("* Casing doesn't matter"), '--boolean YeS'), this.renderUsageUtils.tableGroup('boolean\n(false)', 'false', '--boolean' + this.system.booleanNotSyntaxEnding, '--boolean false', '--boolean=false', '--boolean no', '--boolean=no', colors_1.default.dim("* Casing doesn't matter"), '--boolean fAlSe'), this.renderUsageUtils.tableGroup('array\ntuple', "['value1', 'value2']", '--option value1 value2', '--option=value1 value2'));
    }
    renderUsageProgramConfiguration() {
        if (this.config.help) {
            this.renderUsageUtils.printGroupHeader('Auto Help flag is enabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--help'));
            this.renderUsageUtils.printValid(colors_1.default.yellow('--help-usage'));
            this.renderUsageUtils.printValid(colors_1.default.yellow('-h'));
            this.renderUsageUtils.printValid(colors_1.default.yellow('-hu'));
        }
        else {
            this.renderUsageUtils.printGroupHeader('Auto Help flag is disabled');
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('--help'));
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('--help-usage'));
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('-h'));
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('-hu'));
        }
    }
    renderUsageSystemConfiguration() {
        if (this.system.allowEqualAssign) {
            this.renderUsageUtils.printGroupHeader('Options with equal value is enabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option') + colors_1.default.blue('=') + 'value');
        }
        else {
            this.renderUsageUtils.printGroupHeader('Options with equal value is disabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value');
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('--option') + colors_1.default.blue('=') + 'value');
        }
        if (this.system.booleanNotSyntaxEnding) {
            this.renderUsageUtils.printGroupHeader('Boolean not syntax ending is enabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'));
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option' + this.system.booleanNotSyntaxEnding));
        }
        else {
            this.renderUsageUtils.printGroupHeader('Boolean not syntax ending is disabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'));
            this.renderUsageUtils.printInvalid(colors_1.default.red('--option' + this.system.booleanNotSyntaxEnding));
        }
        if (this.system.allowDuplicateFlagForPrimitive) {
            this.renderUsageUtils.printGroupHeader('Duplicate flags for primitive is enabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), colors_1.default.dim('value1'));
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), colors_1.default.dim('value1'), colors_1.default.yellow('--option'), 'value2');
        }
        else {
            this.renderUsageUtils.printGroupHeader('Duplicate flags for primitive is disabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value');
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('--option'), 'value1', colors_1.default.yellow('--option'), 'value2');
        }
        if (this.system.allowDuplicateFlagForList) {
            this.renderUsageUtils.printGroupHeader('Duplicate flags for list is enabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value1 value2', colors_1.default.yellow('--option'), 'value3');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value1', colors_1.default.yellow('--option'), 'value2 value3');
            if (this.system.overwriteDuplicateFlagForList) {
                this.renderUsageUtils.printGroupHeader('Overwrite duplicate flags for list is enabled');
                this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), colors_1.default.dim('value1'), colors_1.default.yellow('--option'), 'value2 value3');
                this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), colors_1.default.dim('value1 value2'), colors_1.default.yellow('--option'), 'value3');
            }
            else {
                this.renderUsageUtils.printGroupHeader('Overwrite duplicate flags for list is disabled');
                this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value1 value2 value3');
                this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value1', colors_1.default.yellow('--option'), 'value2');
            }
        }
        else {
            this.renderUsageUtils.printGroupHeader('Duplicate flags for list is disabled');
            this.renderUsageUtils.printValid(colors_1.default.yellow('--option'), 'value1 value2 value3');
            this.renderUsageUtils.printInvalid(colors_1.default.yellow('--option'), 'value1', colors_1.default.yellow('--option'), 'value2');
        }
    }
    renderUsage() {
        console.log(colors_1.default.bold(colors_1.default.cyan('📝 Structure:')));
        this.renderUsageStructure();
        console.log('');
        console.log(colors_1.default.bold(colors_1.default.cyan('📝 How to use flags:')));
        this.renderUsageHowToUseOptions();
        console.log('');
        console.log(colors_1.default.bold(colors_1.default.cyan('📝 Program Configuration:')));
        this.renderUsageProgramConfiguration();
        console.log('');
        console.log(colors_1.default.bold(colors_1.default.cyan('📝 System Configuration:')));
        this.renderUsageSystemConfiguration();
        console.log('');
    }
}
exports.NoArgProgram = NoArgProgram;
