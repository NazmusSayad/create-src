import { FlagOption, NoArgProgramMap, ArgumentsOptions, ListArgumentsOption, OptionalArgumentsOptions } from "./types.t.mjs";
export declare class NoArgCore<TName extends string, TSystem extends NoArgCoreHelper.System, TConfig extends NoArgCoreHelper.Config, TOptions extends NoArgCoreHelper.Options> {
    protected name: TName;
    protected system: TSystem;
    protected config: TConfig;
    protected options: TOptions;
    protected programs: NoArgProgramMap;
    private validateNonEmptyString;
    constructor(name: TName, system: TSystem, config: TConfig, options: TOptions);
}
export declare namespace NoArgCoreHelper {
    type Config = {
        readonly help: boolean;
    };
    type Options = {
        readonly description?: string;
        readonly notes?: string[];
        readonly arguments: ArgumentsOptions[];
        readonly optionalArguments: OptionalArgumentsOptions[];
        readonly listArgument?: ListArgumentsOption;
        readonly trailingArguments?: string;
        readonly flags: FlagOption;
        readonly globalFlags: FlagOption;
        readonly customRenderHelp?: {
            helpUsageStructure?: string;
            helpUsageTrailingArgsLabel?: string;
        };
    };
    const defaultConfig: {
        readonly help: true;
    };
    const defaultOptions: {
        readonly arguments: [];
        readonly optionalArguments: [];
        readonly flags: {};
        readonly globalFlags: {};
    };
    type System = {
        readonly skipUnknownFlag?: boolean;
        readonly allowEqualAssign: boolean;
        readonly allowMultipleValuesForPrimitive?: boolean;
        readonly splitListByComma?: boolean;
        readonly allowDuplicateFlagForPrimitive?: boolean;
        readonly allowDuplicateFlagForList: boolean;
        readonly overwriteDuplicateFlagForList?: boolean;
        readonly booleanNotSyntaxEnding: string | false;
        readonly enableHelpBoxBorder?: boolean;
        readonly doNotExitOnError?: boolean;
    };
    const defaultSystem: {
        readonly allowEqualAssign: true;
        readonly allowDuplicateFlagForList: true;
        readonly booleanNotSyntaxEnding: "!";
    };
    type DefaultConfig = typeof defaultConfig;
    type DefaultSystem = typeof defaultSystem;
    type DefaultOptions = typeof NoArgCoreHelper.defaultOptions;
}
