"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NoArgRoot = void 0;
const colors_1 = __importDefault(require("../lib/colors.cjs"));
const admin_symbol_1 = __importDefault(require("./admin-symbol.cjs"));
const NoArgCore_1 = require("./NoArgCore.cjs");
const TypeArray_1 = require("../schema/TypeArray.cjs");
const TypeTuple_1 = require("../schema/TypeTuple.cjs");
const TypeNumber_1 = require("../schema/TypeNumber.cjs");
const TypeString_1 = require("../schema/TypeString.cjs");
const TypeBoolean_1 = require("../schema/TypeBoolean.cjs");
const NoArgProgram_1 = require("./NoArgProgram.cjs");
class NoArgRoot extends NoArgProgram_1.NoArgProgram {
    static string(...strings) {
        const config = {};
        if (strings.length) {
            config.enum = new Set(strings);
        }
        return new TypeString_1.TypeString(config);
    }
    static number(...numbers) {
        const config = {};
        if (numbers.length) {
            config.enum = new Set(numbers);
        }
        return new TypeNumber_1.TypeNumber(config);
    }
    static boolean() {
        return new TypeBoolean_1.TypeBoolean({});
    }
    static array(schema) {
        delete schema.config.aliases;
        delete schema.config.default;
        delete schema.config.required;
        delete schema.config.askQuestion;
        delete schema.config.description;
        const config = { schema };
        return new TypeArray_1.TypeArray(config);
    }
    static tuple(...schema) {
        const config = {
            schema: schema.map((s) => {
                s.config.required = true;
                delete s.config.aliases;
                delete s.config.askQuestion;
                delete s.config.description;
                return s;
            }),
        };
        return new TypeTuple_1.TypeTuple(config);
    }
    static create(name, { config, system, ...options }) {
        return new NoArgRoot(admin_symbol_1.default, name, {
            ...NoArgCore_1.NoArgCoreHelper.defaultSystem,
            ...system,
        }, {
            ...NoArgCore_1.NoArgCoreHelper.defaultConfig,
            ...config,
        }, {
            ...NoArgCore_1.NoArgCoreHelper.defaultOptions,
            ...options,
        });
    }
    static defineConfig(config) {
        return config;
    }
    constructor(symbol, name, system, config, options) {
        if (symbol !== admin_symbol_1.default) {
            throw new Error('NoArg is not meant to be instantiated directly. Use NoArgProgramHelper.create() instead. But if really need this contact the developer. This is disabled just for safety.');
        }
        super(name, system, config, options);
    }
    start(args = process.argv.slice(2)) {
        this.startCore(args);
    }
}
exports.NoArgRoot = NoArgRoot;
NoArgRoot.colors = {
    disable() {
        colors_1.default.enabled = false;
    },
    enable() {
        colors_1.default.enabled = true;
    },
};
