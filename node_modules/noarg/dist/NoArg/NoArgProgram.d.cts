import { Prettify, MergeObject, WritableObject, MakeObjectOptional } from "../types/util.t.cjs";
import { FlagOption, ArgumentsOptions, ListArgumentsOption, OptionalArgumentsOptions } from "./types.t.cjs";
import { NoArgParser } from "./NoArgParser.cjs";
import { NoArgCoreHelper } from "./NoArgCore.cjs";
import { ExtractTypeOutput } from "../schema/type.t.cjs";
export declare class NoArgProgram<TName extends string, TSystem extends NoArgCoreHelper.System, TConfig extends NoArgProgramHelper.Config, TOptions extends NoArgCoreHelper.Options> extends NoArgParser<TName, TSystem, TConfig, TOptions> {
    protected parent?: NoArgProgram<any, any, any, any>;
    constructor(name: TName, system: TSystem, config: TConfig, options: TOptions, parent?: NoArgProgram<any, any, any, any>);
    create<const TName extends string, const TCreateOptionsWithConfig extends Partial<NoArgCoreHelper.Options> & {
        config?: Partial<NoArgProgramHelper.Config>;
    }>(name: TName, { config, ...options }: TCreateOptionsWithConfig): NoArgProgram<TName, TSystem, Required<MergeObject<TConfig, NonNullable<TCreateOptionsWithConfig["config"]>>> extends infer T extends Record<string, any> ? { [Key in keyof T]: Required<MergeObject<TConfig, NonNullable<TCreateOptionsWithConfig["config"]>>>[Key]; } : never, Required<NonNullable<TCreateOptionsWithConfig["config"]>["skipGlobalFlags"] extends true ? Omit<TCreateOptionsWithConfig, "config"> extends Partial<NoArgCoreHelper.Options> ? MergeObject<{
        readonly arguments: [];
        readonly optionalArguments: [];
        readonly flags: {};
        readonly globalFlags: {};
    }, Omit<TCreateOptionsWithConfig, "config">> : never : MergeObject<Omit<TCreateOptionsWithConfig, "config"> extends Partial<NoArgCoreHelper.Options> ? MergeObject<{
        readonly arguments: [];
        readonly optionalArguments: [];
        readonly flags: {};
        readonly globalFlags: {};
    }, Omit<TCreateOptionsWithConfig, "config">> : never, {
        globalFlags: Prettify<MergeObject<TOptions["globalFlags"], (Omit<TCreateOptionsWithConfig, "config"> extends Partial<NoArgCoreHelper.Options> ? MergeObject<{
            readonly arguments: [];
            readonly optionalArguments: [];
            readonly flags: {};
            readonly globalFlags: {};
        }, Omit<TCreateOptionsWithConfig, "config">> : never)["globalFlags"]>>;
    }>> extends infer T_1 extends Record<string, any> ? { [Key_1 in keyof T_1]: Required<NonNullable<TCreateOptionsWithConfig["config"]>["skipGlobalFlags"] extends true ? Omit<TCreateOptionsWithConfig, "config"> extends Partial<NoArgCoreHelper.Options> ? MergeObject<{
        readonly arguments: [];
        readonly optionalArguments: [];
        readonly flags: {};
        readonly globalFlags: {};
    }, Omit<TCreateOptionsWithConfig, "config">> : never : MergeObject<Omit<TCreateOptionsWithConfig, "config"> extends Partial<NoArgCoreHelper.Options> ? MergeObject<{
        readonly arguments: [];
        readonly optionalArguments: [];
        readonly flags: {};
        readonly globalFlags: {};
    }, Omit<TCreateOptionsWithConfig, "config">> : never, {
        globalFlags: Prettify<MergeObject<TOptions["globalFlags"], (Omit<TCreateOptionsWithConfig, "config"> extends Partial<NoArgCoreHelper.Options> ? MergeObject<{
            readonly arguments: [];
            readonly optionalArguments: [];
            readonly flags: {};
            readonly globalFlags: {};
        }, Omit<TCreateOptionsWithConfig, "config">> : never)["globalFlags"]>>;
    }>>[Key_1]; } : never>;
    protected onActionCallback?: NoArgExtract.ExtractAction<TSystem, TConfig, TOptions>;
    on(callback: NonNullable<typeof this.onActionCallback>): this;
    protected startCore(args: string[]): Promise<undefined>;
    private colors;
    private renderHelpIntro;
    private renderHelpUsageIntro;
    private renderHelpPrograms;
    private renderHelpArguments;
    private renderHelpFlags;
    renderHelp(): void;
    private renderUsageUtils;
    private renderUsageStructure;
    private renderUsageHowToUseOptions;
    private renderUsageProgramConfiguration;
    private renderUsageSystemConfiguration;
    renderUsage(): void;
}
export declare namespace NoArgProgramHelper {
    type Config = NoArgCoreHelper.Config & {
        readonly skipGlobalFlags?: boolean;
    };
}
export declare namespace NoArgExtract {
    type ExtractArguments<T extends ArgumentsOptions[]> = {
        [K in keyof T]: ExtractTypeOutput<T[K]['type']>;
    };
    type ExtractOptionalArguments<T extends OptionalArgumentsOptions[]> = {
        [K in keyof ExtractArguments<T>]: ExtractArguments<T>[K] | undefined;
    };
    type ExtractListArgument<T extends ListArgumentsOption> = ExtractTypeOutput<T['type']>[];
    type ExtractFlags<T extends FlagOption> = Prettify<MakeObjectOptional<WritableObject<{
        [K in keyof T]: ExtractTypeOutput<T[K]> | (T[K]['config']['required'] extends true ? never : undefined);
    }>>>;
    type ExtractCombinedArgs<TOptions extends NoArgCoreHelper.Options> = [
        ...ExtractArguments<NonNullable<TOptions['arguments']>>,
        ...ExtractOptionalArguments<NonNullable<TOptions['optionalArguments']>>,
        ...(TOptions['listArgument'] extends {} ? [
            ListArguments: Prettify<ExtractListArgument<NonNullable<TOptions['listArgument']>>>
        ] : []),
        ...(TOptions['trailingArguments'] extends NonNullable<NoArgCoreHelper.Options['trailingArguments']> ? TOptions['trailingArguments'] extends '' ? [] : [TrailingArguments: string[]] : [])
    ];
    type ExtractCombinedFlags<TOptions extends NoArgCoreHelper.Options> = Prettify<MakeObjectOptional<ExtractFlags<MergeObject<NonNullable<TOptions['globalFlags']>, NonNullable<TOptions['flags']>>>>>;
    type ExtractAction<TSystem extends NoArgCoreHelper.System, TConfig extends NoArgProgramHelper.Config, TOptions extends NoArgCoreHelper.Options> = (args: ExtractCombinedArgs<TOptions>, flags: ExtractCombinedFlags<TOptions>, config: TConfig, system: TSystem) => void;
}
