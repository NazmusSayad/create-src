import colors from "../lib/colors.mjs";
import adminSymbol from "./admin-symbol.mjs";
import { NoArgCoreHelper } from "./NoArgCore.mjs";
import { TypeArray } from "../schema/TypeArray.mjs";
import { TypeTuple } from "../schema/TypeTuple.mjs";
import { TypeNumber } from "../schema/TypeNumber.mjs";
import { TypeString } from "../schema/TypeString.mjs";
import { TypeBoolean } from "../schema/TypeBoolean.mjs";
import { NoArgProgram } from "./NoArgProgram.mjs";
export class NoArgRoot extends NoArgProgram {
    static string(...strings) {
        const config = {};
        if (strings.length) {
            config.enum = new Set(strings);
        }
        return new TypeString(config);
    }
    static number(...numbers) {
        const config = {};
        if (numbers.length) {
            config.enum = new Set(numbers);
        }
        return new TypeNumber(config);
    }
    static boolean() {
        return new TypeBoolean({});
    }
    static array(schema) {
        delete schema.config.aliases;
        delete schema.config.default;
        delete schema.config.required;
        delete schema.config.askQuestion;
        delete schema.config.description;
        const config = { schema };
        return new TypeArray(config);
    }
    static tuple(...schema) {
        const config = {
            schema: schema.map((s) => {
                s.config.required = true;
                delete s.config.aliases;
                delete s.config.askQuestion;
                delete s.config.description;
                return s;
            }),
        };
        return new TypeTuple(config);
    }
    static create(name, { config, system, ...options }) {
        return new NoArgRoot(adminSymbol, name, {
            ...NoArgCoreHelper.defaultSystem,
            ...system,
        }, {
            ...NoArgCoreHelper.defaultConfig,
            ...config,
        }, {
            ...NoArgCoreHelper.defaultOptions,
            ...options,
        });
    }
    static defineConfig(config) {
        return config;
    }
    constructor(symbol, name, system, config, options) {
        if (symbol !== adminSymbol) {
            throw new Error('NoArg is not meant to be instantiated directly. Use NoArgProgramHelper.create() instead. But if really need this contact the developer. This is disabled just for safety.');
        }
        super(name, system, config, options);
    }
    start(args = process.argv.slice(2)) {
        this.startCore(args);
    }
}
NoArgRoot.colors = {
    disable() {
        colors.enabled = false;
    },
    enable() {
        colors.enabled = true;
    },
};
